# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UITest4.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
import traceback
from sqlite3 import IntegrityError

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QColor, QBrush, QCursor
from PyQt5.QtWidgets import QFileDialog, QMenu, QInputDialog, QLineEdit

import updateDB
import xlsxOpenpyxl
import quarryDB
import constants
import insertDB
import deleteDB
import sqlite3DB

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1142, 782)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_1.setObjectName("pushButton_1")
        self.verticalLayout.addWidget(self.pushButton_1)

        # self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_2.setMinimumSize(QtCore.QSize(100, 40))
        # self.pushButton_2.setObjectName("pushButton_2")
        # self.verticalLayout.addWidget(self.pushButton_2)
        # self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_3.setMinimumSize(QtCore.QSize(100, 40))
        # self.pushButton_3.setObjectName("pushButton_3")
        # self.verticalLayout.addWidget(self.pushButton_3)

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)

        #修订键
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)

        #编辑单板
        self.pushButton_edit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_edit.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_edit.setObjectName("pushButton_edit")
        self.verticalLayout.addWidget(self.pushButton_edit)
        self

        # self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_3.setMinimumSize(QtCore.QSize(100, 40))
        # self.pushButton_3.setObjectName("pushButton_3")
        # self.verticalLayout.addWidget(self.pushButton_3)


        self.white = QtWidgets.QWidget(self.centralwidget)
        self.white.setObjectName("white")
        self.verticalLayout.addWidget(self.white)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout.addWidget(self.line)
        self.stackedWidget_1 = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget_1.setObjectName("stackedWidget_1")


        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("编辑单板")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.page_6)
        self.stackedWidget_1.addWidget(self.page_6)

        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.page_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.label_2 = QtWidgets.QLabel(self.page_3)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.checkBox = QtWidgets.QCheckBox(self.page_3)
        self.checkBox.setObjectName("checkBox")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.checkBox)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_2)
        self.checkBox_2 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_2.setObjectName("checkBox_2")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.checkBox_2)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_3)
        self.checkBox_3 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_3.setObjectName("checkBox_3")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.checkBox_3)
        self.lineEdit = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit.setObjectName("lineEdit")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.lineEdit)
        self.checkBox_4 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_4.setObjectName("checkBox_4")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.checkBox_4)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.lineEdit_4)
        self.checkBox_5 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_5.setObjectName("checkBox_5")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.checkBox_5)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.lineEdit_5)
        self.checkBox_6 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_6.setObjectName("checkBox_6")
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.checkBox_6)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.lineEdit_6)
        self.checkBox_8 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_8.setObjectName("checkBox_8")
        self.formLayout.setWidget(7, QtWidgets.QFormLayout.LabelRole, self.checkBox_8)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.formLayout.setWidget(7, QtWidgets.QFormLayout.FieldRole, self.lineEdit_7)
        self.checkBox_7 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_7.setObjectName("checkBox_7")
        self.formLayout.setWidget(8, QtWidgets.QFormLayout.LabelRole, self.checkBox_7)
        self.lineEdit_8 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.formLayout.setWidget(8, QtWidgets.QFormLayout.FieldRole, self.lineEdit_8)
        self.checkBox_21 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_21.setObjectName("checkBox_21")
        self.formLayout.setWidget(9, QtWidgets.QFormLayout.LabelRole, self.checkBox_21)
        self.lineEdit_9 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.formLayout.setWidget(9, QtWidgets.QFormLayout.FieldRole, self.lineEdit_9)
        self.checkBox_9 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_9.setObjectName("checkBox_9")
        self.formLayout.setWidget(10, QtWidgets.QFormLayout.LabelRole, self.checkBox_9)
        self.lineEdit_10 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.formLayout.setWidget(10, QtWidgets.QFormLayout.FieldRole, self.lineEdit_10)
        self.checkBox_22 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_22.setObjectName("checkBox_22")
        self.formLayout.setWidget(11, QtWidgets.QFormLayout.LabelRole, self.checkBox_22)
        self.lineEdit_11 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.formLayout.setWidget(11, QtWidgets.QFormLayout.FieldRole, self.lineEdit_11)
        self.checkBox_10 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_10.setObjectName("checkBox_10")
        self.formLayout.setWidget(12, QtWidgets.QFormLayout.LabelRole, self.checkBox_10)
        self.lineEdit_12 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.formLayout.setWidget(12, QtWidgets.QFormLayout.FieldRole, self.lineEdit_12)
        self.checkBox_24 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_24.setObjectName("checkBox_24")
        self.formLayout.setWidget(13, QtWidgets.QFormLayout.LabelRole, self.checkBox_24)
        self.lineEdit_13 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.formLayout.setWidget(13, QtWidgets.QFormLayout.FieldRole, self.lineEdit_13)
        self.checkBox_12 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_12.setObjectName("checkBox_12")
        self.formLayout.setWidget(14, QtWidgets.QFormLayout.LabelRole, self.checkBox_12)
        self.lineEdit_14 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.formLayout.setWidget(14, QtWidgets.QFormLayout.FieldRole, self.lineEdit_14)
        self.checkBox_23 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_23.setObjectName("checkBox_23")
        self.formLayout.setWidget(15, QtWidgets.QFormLayout.LabelRole, self.checkBox_23)
        self.lineEdit_15 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.formLayout.setWidget(15, QtWidgets.QFormLayout.FieldRole, self.lineEdit_15)
        self.checkBox_11 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_11.setObjectName("checkBox_11")
        self.formLayout.setWidget(16, QtWidgets.QFormLayout.LabelRole, self.checkBox_11)
        self.lineEdit_16 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.formLayout.setWidget(16, QtWidgets.QFormLayout.FieldRole, self.lineEdit_16)
        self.checkBox_17 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_17.setObjectName("checkBox_17")
        self.formLayout.setWidget(17, QtWidgets.QFormLayout.LabelRole, self.checkBox_17)
        self.lineEdit_17 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.formLayout.setWidget(17, QtWidgets.QFormLayout.FieldRole, self.lineEdit_17)
        self.checkBox_18 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_18.setObjectName("checkBox_18")
        self.formLayout.setWidget(18, QtWidgets.QFormLayout.LabelRole, self.checkBox_18)
        self.lineEdit_18 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.formLayout.setWidget(18, QtWidgets.QFormLayout.FieldRole, self.lineEdit_18)
        self.checkBox_20 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_20.setObjectName("checkBox_20")
        self.formLayout.setWidget(19, QtWidgets.QFormLayout.LabelRole, self.checkBox_20)
        self.lineEdit_19 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_19.setObjectName("lineEdit_19")
        self.formLayout.setWidget(19, QtWidgets.QFormLayout.FieldRole, self.lineEdit_19)
        self.checkBox_19 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_19.setObjectName("checkBox_19")
        self.formLayout.setWidget(20, QtWidgets.QFormLayout.LabelRole, self.checkBox_19)
        self.lineEdit_20 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_20.setObjectName("lineEdit_20")
        self.formLayout.setWidget(20, QtWidgets.QFormLayout.FieldRole, self.lineEdit_20)
        self.checkBox_13 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_13.setObjectName("checkBox_13")
        self.formLayout.setWidget(21, QtWidgets.QFormLayout.LabelRole, self.checkBox_13)
        self.lineEdit_21 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_21.setObjectName("lineEdit_21")
        self.formLayout.setWidget(21, QtWidgets.QFormLayout.FieldRole, self.lineEdit_21)
        self.checkBox_14 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_14.setObjectName("checkBox_14")
        self.formLayout.setWidget(22, QtWidgets.QFormLayout.LabelRole, self.checkBox_14)
        self.lineEdit_22 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_22.setObjectName("lineEdit_22")
        self.formLayout.setWidget(22, QtWidgets.QFormLayout.FieldRole, self.lineEdit_22)
        self.checkBox_15 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_15.setObjectName("checkBox_15")
        self.formLayout.setWidget(23, QtWidgets.QFormLayout.LabelRole, self.checkBox_15)
        self.lineEdit_23 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_23.setObjectName("lineEdit_23")
        self.formLayout.setWidget(23, QtWidgets.QFormLayout.FieldRole, self.lineEdit_23)
        self.checkBox_16 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_16.setObjectName("checkBox_16")
        self.formLayout.setWidget(24, QtWidgets.QFormLayout.LabelRole, self.checkBox_16)
        self.lineEdit_24 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_24.setObjectName("lineEdit_24")
        self.formLayout.setWidget(24, QtWidgets.QFormLayout.FieldRole, self.lineEdit_24)
        self.checkBox_25 = QtWidgets.QCheckBox(self.page_3)
        self.checkBox_25.setObjectName("checkBox_25")
        self.formLayout.setWidget(25, QtWidgets.QFormLayout.LabelRole, self.checkBox_25)
        self.lineEdit_25 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_25.setObjectName("lineEdit_25")
        self.formLayout.setWidget(25, QtWidgets.QFormLayout.FieldRole, self.lineEdit_25)
        self.buttonBox = QtWidgets.QDialogButtonBox(self.page_3)
        self.buttonBox.setMaximumSize(QtCore.QSize(220, 25))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Apply|QtWidgets.QDialogButtonBox.Reset)
        self.buttonBox.setObjectName("buttonBox")
        self.formLayout.setWidget(26, QtWidgets.QFormLayout.FieldRole, self.buttonBox)
        self.verticalLayout_2.addLayout(self.formLayout)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(self.page_3)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.tableWidget_2 = QtWidgets.QTableWidget(self.page_3)
        self.tableWidget_2.setMinimumSize(QtCore.QSize(700, 630))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(0)
        self.tableWidget_2.setRowCount(0)
        self.verticalLayout_3.addWidget(self.tableWidget_2)
        self.pushButton_10 = QtWidgets.QPushButton(self.page_3)
        self.pushButton_10.setMinimumSize(QtCore.QSize(100, 0))
        self.pushButton_10.setMaximumSize(QtCore.QSize(100, 25))
        self.pushButton_10.setObjectName("pushButton_10")
        self.verticalLayout_3.addWidget(self.pushButton_10, 0, QtCore.Qt.AlignRight)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        self.stackedWidget_1.addWidget(self.page_3)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.page_5)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_3 = QtWidgets.QLabel(self.page_5)
        self.label_3.setObjectName("label_3")
        self.horizontallayout_6 = QtWidgets.QVBoxLayout(self.page_5)
        self.horizontallayout_6.setObjectName("horizontallayout_6")

        self.verticalLayout_5.addWidget(self.label_3)
        self.verticalLayout_5.addLayout(self.horizontallayout_6)
        self.comboBox = QtWidgets.QComboBox(self.page_5)
        self.comboBox.setMaximumSize(QtCore.QSize(200, 16777215))
        self.comboBox.setObjectName("comboBox")
        #刷新剪之前
        # self.verticalLayout_5.addWidget(self.comboBox)

        self.label_4 = QtWidgets.QLabel(self.page_5)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_5.addWidget(self.label_4)
        self.tabWidget = QtWidgets.QTabWidget(self.page_5)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.South)
        self.tabWidget.setObjectName("tabWidget")
        # self.tab = QtWidgets.QWidget()
        # self.tab.setObjectName("tab")
        # self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.tab)
        # self.verticalLayout_6.setObjectName("verticalLayout_6")
        # self.tableWidget = QtWidgets.QTableWidget(self.tab)
        # self.tableWidget.setObjectName("tableWidget")
        # self.tableWidget.setColumnCount(0)
        # self.tableWidget.setRowCount(0)
        # self.verticalLayout_6.addWidget(self.tableWidget)
        # self.tabWidget.addTab(self.tab, "")
        # self.tab_2 = QtWidgets.QWidget()
        # self.tab_2.setObjectName("tab_2")
        # self.tabWidget.addTab(self.tab_2, "")

        #导出excel 键 浏览页面

        self.verticalLayout_5.addWidget(self.tabWidget)
        self.pushButton_12 = QtWidgets.QPushButton(self.page_5)
        self.pushButton_12.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_12.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_12.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_12.setObjectName("pushButton_12")


        #导入excel 浏览界面
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.pushButton_20 = QtWidgets.QPushButton(self.page_5)
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_20.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_20.setMinimumSize(QtCore.QSize(100, 30))



        self.pushButton_21 = QtWidgets.QPushButton(self.page_5)
        self.pushButton_21.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_21.setMinimumSize(QtCore.QSize(100, 30))

        self.pushButton_21.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_21.setObjectName("退出预览")
        self.pushButton_21.hide()



        self.pushButton_22 = QtWidgets.QPushButton(self.page_5)
        self.pushButton_22.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_22.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_22.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_22.setObjectName("保存")
        self.pushButton_22.hide()
        #!!!!!!!!!!!!!!!!!!!!!!!!!
        #这个顺序千万别改 气死我了！！！！！！！！！！！！！！！！！！
        self.horizontalLayout_9.addWidget(self.pushButton_20, 1, QtCore.Qt.AlignRight)
        self.horizontalLayout_9.addWidget(self.pushButton_12)
        self.horizontalLayout_9.addWidget(self.pushButton_21, 1, QtCore.Qt.AlignLeft)
        self.horizontalLayout_9.addWidget(self.pushButton_22)

        self.verticalLayout_5.addLayout(self.horizontalLayout_9)

        self.stackedWidget_1.addWidget(self.page_5)



        #修订页
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.stackedWidget_1.addWidget(self.page)

        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.page)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.label_6 = QtWidgets.QLabel(self.page)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_15.addWidget(self.label_6)
        self.comboBox_2 = QtWidgets.QComboBox(self.page)
        self.comboBox_2.setMaximumSize(QtCore.QSize(200, 16777215))
        self.comboBox_2.setObjectName("comboBox_2")
        self.verticalLayout_15.addWidget(self.comboBox_2)
        self.verticalLayout_18.addLayout(self.verticalLayout_15)
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.label_7 = QtWidgets.QLabel(self.page)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_16.addWidget(self.label_7)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.tableWidget_6 = QtWidgets.QTableWidget(self.page)
        self.tableWidget_6.setObjectName("tableWidget_6")
        self.horizontalLayout_6.addWidget(self.tableWidget_6)

        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.pushButton_14 = QtWidgets.QPushButton(self.page)
        self.pushButton_14.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_14.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_14.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_14.setObjectName("pushButton_14")
        self.verticalLayout_14.addWidget(self.pushButton_14)
        self.pushButton_17 = QtWidgets.QPushButton(self.page)
        self.pushButton_17.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_17.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_17.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_17.setObjectName("pushButton_17")
        self.verticalLayout_14.addWidget(self.pushButton_17)
        # self.pushButton_16 = QtWidgets.QPushButton(self.page)
        # self.pushButton_16.setMinimumSize(QtCore.QSize(100, 30))
        # self.pushButton_16.setMaximumSize(QtCore.QSize(100, 30))
        # self.pushButton_16.setLayoutDirection(QtCore.Qt.RightToLeft)
        # self.pushButton_16.setObjectName("pushButton_16")
        # self.verticalLayout_14.addWidget(self.pushButton_16)
        self.horizontalLayout_6.addLayout(self.verticalLayout_14)
        self.verticalLayout_16.addLayout(self.horizontalLayout_6)
        self.verticalLayout_18.addLayout(self.verticalLayout_16)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_8 = QtWidgets.QLabel(self.page)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_17.addWidget(self.label_8)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        #修订提交
        self.tableWidget_5 = QtWidgets.QTableWidget(self.page)
        self.tableWidget_5.setObjectName("tableWidget_5")
        self.tableWidget_5.setColumnCount(len(constants.head_name_logs) - 1) #时间不用写
        self.tableWidget_5.setRowCount(1)
        self.tableWidget_5.setHorizontalHeaderLabels(constants.head_name_logs_input)
        self.tableWidget_5.verticalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tableWidget_5.horizontalHeader().setSectionResizeMode(0,QHeaderView.ResizeToContents)
        self.tableWidget_5.horizontalHeader().setSectionResizeMode(1,QHeaderView.ResizeToContents)
        self.tableWidget_5.horizontalHeader().setSectionResizeMode(2,QHeaderView.ResizeToContents)
        self.tableWidget_5.horizontalHeader().setSectionResizeMode(3,QHeaderView.Stretch)
        self.tableWidget_5.horizontalHeader().setSectionResizeMode(4,QHeaderView.ResizeToContents)

        # self.tableWidget_5.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        self.horizontalLayout_7.addWidget(self.tableWidget_5)

        self.pushButton_15 = QtWidgets.QPushButton(self.page)
        self.pushButton_15.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_15.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_15.setObjectName("pushButton_15")
        self.horizontalLayout_7.addWidget(self.pushButton_15)
        self.verticalLayout_17.addLayout(self.horizontalLayout_7)
        self.verticalLayout_18.addLayout(self.verticalLayout_17)
        self.verticalLayout_18.setStretch(0, 1)
        self.verticalLayout_18.setStretch(1, 11)
        self.verticalLayout_18.setStretch(2, 4)
        self.stackedWidget_1.addWidget(self.page)

        #浏览刷新建

        self.pushButton_13 = QtWidgets.QPushButton(self.page_5)
        self.pushButton_13.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_13.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_13.setObjectName("pushButton_13")
        self.horizontallayout_6.addWidget(self.comboBox)
        self.horizontallayout_6.addWidget(self.pushButton_13)
        self.verticalLayout_5.addLayout(self.horizontallayout_6)


        #CURD 页layout

        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.page_4)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        # self.verticalLayout_13.setStretch(0, 1)
        # self.verticalLayout_13.setStretch(1, 1)
        # self.verticalLayout_13.setStretch(2, 4)

        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")

        #单板 框布局
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.verticalLayout_7.setObjectName("verticalLayout_7")


        self.label_31 = QtWidgets.QLabel(self.page_4)
        self.label_31.setMinimumSize(QtCore.QSize(0, 12))
        self.label_31.setMaximumSize(QtCore.QSize(300, 12))
        self.label_31.setObjectName("label_31")
        self.verticalLayout_7.addWidget(self.label_31)
        self.treeWidget = QtWidgets.QTreeWidget(self.page_4)
        self.treeWidget.setObjectName("treeWidget")

        self.verticalLayout_7.addWidget(self.treeWidget)




        self.horizontalLayout_5.addLayout(self.verticalLayout_7)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_33 = QtWidgets.QLabel(self.page_4)
        self.label_33.setMinimumSize(QtCore.QSize(0, 12))
        self.label_33.setMaximumSize(QtCore.QSize(16777215, 12))
        self.label_33.setObjectName("label_33")
        self.verticalLayout_8.addWidget(self.label_33)
        self.listWidget = QtWidgets.QListWidget(self.page_4)
        self.listWidget.setMinimumSize(QtCore.QSize(560, 0))
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout_8.addWidget(self.listWidget)

        self.horizontalLayout_5.addLayout(self.verticalLayout_8)
        self.pushButton_11 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_11.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_11.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_11.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_11.setObjectName("pushButton_11")
        #清空键搬家到ver11
        # self.horizontalLayout_5.addWidget(self.pushButton_11)
        self.verticalLayout_13.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_32 = QtWidgets.QLabel(self.page_4)
        self.label_32.setObjectName("label_32")
        self.verticalLayout_9.addWidget(self.label_32)

        # 初始化提交界面的table
        self.tableWidget_3 = QtWidgets.QTableWidget(self.page_4)
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(len(constants.head_name_cn))
        self.tableWidget_3.setRowCount(1)
        self.tableWidget_3.setHorizontalHeaderLabels(constants.head_name_cn)
        self.verticalLayout_7.addWidget(self.tableWidget_3)

        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.widget = QtWidgets.QWidget(self.page_4)
        self.widget.setObjectName("widget")
        self.horizontalLayout_4.addWidget(self.widget)

        # 提交键
        # self.pushButton = QtWidgets.QPushButton(self.page_4)
        # self.pushButton.setMinimumSize(QtCore.QSize(0, 30))
        # self.pushButton.setMaximumSize(QtCore.QSize(100, 16777215))
        # self.pushButton.setObjectName("pushButton")
        # self.horizontalLayout_4.addWidget(self.pushButton)
        #
        # self.tableWidget_3 = QtWidgets.QTableWidget(self.page_4)
        # self.tableWidget_3.setObjectName("tableWidget_3")
        # self.tableWidget_3.setColumnCount(0)
        # self.tableWidget_3.setRowCount(0)

        self.verticalLayout_9.addWidget(self.tableWidget_3)
        self.horizontalLayout_3.addLayout(self.verticalLayout_9)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")

#搜索键
        self.pushButton_6 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_6.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_6.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_11.addWidget(self.pushButton_6)
#提交键
        self.pushButton = QtWidgets.QPushButton(self.page_4)
        self.pushButton.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_11.addWidget(self.pushButton)

        self.horizontalLayout_3.addLayout(self.verticalLayout_11)
        self.verticalLayout_13.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.label_5 = QtWidgets.QLabel(self.page_4)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_10.addWidget(self.label_5)

        #搜索结果layout
        self.tableWidget_4 = QtWidgets.QTableWidget(self.page_4)

        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(0)
        self.tableWidget_4.setRowCount(0)


        self.verticalLayout_10.addWidget(self.tableWidget_4)
        self.horizontalLayout_4.addLayout(self.verticalLayout_10)
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.verticalLayout_12.setSpacing(6)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.pushButton_9 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_9.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_9.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_9.setObjectName("pushButton_9")
        self.verticalLayout_12.addWidget(self.pushButton_9)
        self.pushButton_8 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_8.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_8.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_8.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_8.setAutoFillBackground(True)
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout_12.addWidget(self.pushButton_8)
        self.pushButton_7 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_7.setMinimumSize(QtCore.QSize(100, 30))
        self.pushButton_7.setMaximumSize(QtCore.QSize(100, 30))
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout_12.addWidget(self.pushButton_7)
        self.horizontalLayout_4.addLayout(self.verticalLayout_12)
        self.verticalLayout_13.addLayout(self.horizontalLayout_4)


        self.stackedWidget_1.addWidget(self.page_4)
        self.horizontalLayout.addWidget(self.stackedWidget_1)
        #s

        # self.horizontalLayout.setStretch(1,7)

        self.verticalLayout_4.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1142, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget_1.setCurrentIndex(2)
        self.comboBox.setCurrentIndex(-1)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #清空键
        # self.pushButton_11 = QtWidgets.QPushButton(self.page_4)
        # self.pushButton_11.setMinimumSize(QtCore.QSize(100, 30))
        # self.pushButton_11.setMaximumSize(QtCore.QSize(100, 30))
        # self.pushButton_11.setLayoutDirection(QtCore.Qt.RightToLeft)
        # self.pushButton_11.setObjectName("pushButton_11")
        self.verticalLayout_11.addWidget(self.pushButton_11)


    # 注册信号槽

        # treewidget
        self.treeWidget.itemChanged.connect(self.check_item)

        # 监听切换页面按钮
        self.pushButton_1.clicked.connect(self.show_page)
        # self.pushButton_2.clicked.connect(self.show_page)
        # self.pushButton_3.clicked.connect(self.show_page)
        self.pushButton_4.clicked.connect(self.show_page)
        self.pushButton_5.clicked.connect(self.show_page)
        self.pushButton_edit.clicked.connect(self.show_page)

        # 监听checkbox的状态改变  先写一部分进行测试
        self.checkBox.stateChanged.connect(self.select_text)
        self.checkBox_2.stateChanged.connect(self.select_text)
        self.checkBox_3.stateChanged.connect(self.select_text)
        self.checkBox_4.stateChanged.connect(self.select_text)
        self.checkBox_5.stateChanged.connect(self.select_text)

        # 默认text只读 同样先测试前五个
        self.lineEdit_2.setReadOnly(1)
        self.lineEdit_3.setReadOnly(1)
        self.lineEdit.setReadOnly(1)
        self.lineEdit_4.setReadOnly(1)
        self.lineEdit_5.setReadOnly(1)

        # 提交和重置按钮
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Apply).clicked.connect(self.apply_form)
        # self.buttonBox.button(QtWidgets.QDialogButtonBox.Reset).clicked.connect(self.reset_form)




        resources_list = self.tree_init()

        # 批量插入表下拉资源单监听
        self.comboBox.addItems(resources_list)
        self.comboBox.currentIndexChanged.connect(self.select_from_resources)
        self.selected_hardware = []

        #修订页下拉资源单
        self.comboBox_2.addItems(resources_list)
        self.comboBox_2.currentTextChanged.connect(self.select_from_logs)

        #编辑单板
        self.stackedWidget_1.addWidget(self.page_6)


        # 添加提交键监听
        # self.pushButton.clicked.connect(self.submit_form)
        self.pushButton.clicked.connect(self.double_check_submit)

        #搜索键监听
        self.pushButton_6.clicked.connect(self.search)

        #设置CURD界面比例layout
        self.verticalLayout_13.setStretch(0, 2)
        self.verticalLayout_13.setStretch(1, 2)
        self.verticalLayout_13.setStretch(2, 10)

        #注册删除按钮
        self.pushButton_8.clicked.connect(self.double_check_delete)

        #修订删除按钮
        self.pushButton_17.clicked.connect(self.double_check_delete_revise)

        #注册更新键
        self.pushButton_9.clicked.connect(self.update)

        #注册curd页导出键
        self.pushButton_7.clicked.connect(self.search_to_excel)

        #注册浏览页导出键
        self.pushButton_12.clicked.connect(self.browse_to_excel)

        #注册清空检索条件键
        self.pushButton_11.clicked.connect(self.clear_search)

        #注册浏览刷新
        self.pushButton_13.clicked.connect(self.refresh_browse)

        #注册修订确认
        self.pushButton_15.clicked.connect(self.double_check_revise)

        # self.tableWidget_5.itemChanged.connect(self.resize)
        # 修订保存键
        self.pushButton_14.clicked.connect(self.update_revise)

        #从excel导入
        self.pushButton_20.clicked.connect(self.open_excel)
        #退出预览
        self.pushButton_21.clicked.connect(self.close_browse)

        self.pushButton_22.clicked.connect(self.double_check_overwrite)

        #添加单板菜单
        self.treeWidget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.treeWidget.customContextMenuRequested.connect(self.showContextMenu)

        self.contextMenu = QMenu(self.treeWidget)
        self.actionA = self.contextMenu.addAction('新建形态表')
        self.actionB = self.contextMenu.addAction('新建单板')
        self.actionC = self.contextMenu.addAction('删除')

        self.actionA.triggered.connect(self.menu_newForm)
        self.actionB.triggered.connect(self.menu_newHardware)
        self.actionC.triggered.connect(self.menu_delete)




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_1.setText(_translate("MainWindow", "浏览"))
        # self.pushButton_2.setText(_translate("MainWindow", "搜索"))
        # self.pushButton_3.setText(_translate("MainWindow", "对比"))
        self.pushButton_4.setText(_translate("MainWindow", "管理"))
        self.pushButton_5.setText(_translate("MainWindow", "修订"))
        self.label_2.setText(_translate("MainWindow", "检索条件："))
        self.checkBox.setText(_translate("MainWindow", "业务名称"))
        self.checkBox_2.setText(_translate("MainWindow", "位宽（bit）"))
        self.checkBox_3.setText(_translate("MainWindow", "条数（K）"))
        self.checkBox_4.setText(_translate("MainWindow", "TID位宽"))
        self.checkBox_5.setText(_translate("MainWindow", "TID值"))
        self.checkBox_6.setText(_translate("MainWindow", "SubTid位宽"))
        self.checkBox_8.setText(_translate("MainWindow", "subTid值"))
        self.checkBox_7.setText(_translate("MainWindow", "存储位置"))
        self.checkBox_21.setText(_translate("MainWindow", "算法表ID"))
        self.checkBox_9.setText(_translate("MainWindow", "算法表规格（K）"))
        self.checkBox_22.setText(_translate("MainWindow", "动作表ID"))
        self.checkBox_10.setText(_translate("MainWindow", "测试规格（K）"))
        self.checkBox_24.setText(_translate("MainWindow", "单多播"))
        self.checkBox_12.setText(_translate("MainWindow", "index/data"))
        self.checkBox_23.setText(_translate("MainWindow", "TCAM起始地址"))
        self.checkBox_11.setText(_translate("MainWindow", "TBLM_ID"))
        self.checkBox_17.setText(_translate("MainWindow", "落地部门"))
        self.checkBox_18.setText(_translate("MainWindow", "落地负责人"))
        self.checkBox_20.setText(_translate("MainWindow", "落地情况确认"))
        self.checkBox_19.setText(_translate("MainWindow", "备注"))
        self.checkBox_13.setText(_translate("MainWindow", "server type位宽"))
        self.checkBox_14.setText(_translate("MainWindow", "server type值"))
        self.checkBox_15.setText(_translate("MainWindow", "单板名称"))
        self.checkBox_16.setText(_translate("MainWindow", "CheckBox"))
        self.checkBox_25.setText(_translate("MainWindow", "CheckBox"))
        self.pushButton_12.setText(_translate("MainWindow", "导出到Excel"))
        self.pushButton_20.setText(_translate("MainWindow", "从Excel导入"))
        self.pushButton_21.setText(_translate("MainWindow", "退出预览"))
        self.pushButton_22.setText(_translate("MainWindow", "保存至单板"))
        self.label.setText(_translate("MainWindow", "检索结果："))
        self.pushButton_10.setText(_translate("MainWindow", "导出到Excel"))
        self.label_3.setText(_translate("MainWindow", "形态表："))
        self.label_4.setText(_translate("MainWindow", "当前形态："))
        # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))
        self.label_31.setText(_translate("MainWindow", "选择要检索的单板"))
        self.treeWidget.headerItem().setText(0, _translate("MainWindow", "形态表"))
        __sortingEnabled = self.treeWidget.isSortingEnabled()
        self.treeWidget.setSortingEnabled(False)
        # self.treeWidget.topLevelItem(0).setText(0, _translate("MainWindow", "表1"))
        # self.treeWidget.topLevelItem(0).child(0).setText(0, _translate("MainWindow", "单板1"))
        # self.treeWidget.topLevelItem(0).child(1).setText(0, _translate("MainWindow", "单板2"))
        self.treeWidget.setSortingEnabled(__sortingEnabled)
        self.label_33.setText(_translate("MainWindow", "日志："))
        self.pushButton_11.setText(_translate("MainWindow", "清空"))
        self.label_32.setText(_translate("MainWindow", "待编辑条目："))
        self.pushButton_6.setText(_translate("MainWindow", "搜索"))
        self.pushButton.setText(_translate("MainWindow", "提交"))
        self.label_5.setText(_translate("MainWindow", "检索结果："))
        self.pushButton_9.setText(_translate("MainWindow", "保存更改"))
        self.pushButton_8.setText(_translate("MainWindow", "删除选中条目"))
        self.pushButton_7.setText(_translate("MainWindow", "导出到excel"))
        self.pushButton_13.setText(_translate("MainWindow", "刷新"))

        #修订页
        self.label_6.setText(_translate("MainWindow", "形态表："))
        self.label_7.setText(_translate("MainWindow", "修订记录："))
        self.pushButton_14.setText(_translate("MainWindow", "保存更改"))
        self.pushButton_17.setText(_translate("MainWindow", "删除选择记录"))
        # self.pushButton_16.setText(_translate("MainWindow", "导出到Excel"))
        self.pushButton_15.setText(_translate("MainWindow", "提交"))
        self.label_8.setText(_translate("MainWindow", "请输入修订内容："))

        #编辑单板页
        self.pushButton_edit.setText(_translate("MainWindow","编辑单板"))


    def show_page(self):
        dic = {
            "pushButton_1": 1,
            # "pushButton_2": 0,
            # "pushButton_3": 2,
            "pushButton_4": 3,
            "pushButton_5": 2,
            "pushButton_edit": 4
        }
        index = dic[self.stackedWidget_1.sender().objectName()]
        self.stackedWidget_1.setCurrentIndex(index)

        # 根据checkbox解锁text输入

    def select_text(self):
        dic = {
            "checkBox": self.lineEdit_2,
            "checkBox_2": self.lineEdit_3,
            "checkBox_3": self.lineEdit,
            "checkBox_4": self.lineEdit_4,
            "checkBox_5": self.lineEdit_5,

        }
        index = dic[self.stackedWidget_1.sender().objectName()]
        print(self.lineEdit_2.text() == '')

        if self.stackedWidget_1.sender().isChecked():
            index.setReadOnly(0)
        else:
            index.setReadOnly(1)
        # 提交查询表单 试用 先提交两个

    def apply_form(self):
        list = []
        # 插入三个数据
        list.append(self.lineEdit_2.text())
        list.append(self.lineEdit_3.text())
        list.append(self.lineEdit.text())
        print(list)
        result = quarryDB.quarry_search(list[0], list[1], list[2])  # 搜索结果
        # 贴到table上
        self.tableWidget_2.setRowCount(len(result))
        self.tableWidget_2.setColumnCount(len(result[0]))
        # 表头
        headName = quarryDB.get_head_name('test')
        print(headName)
        self.tableWidget_2.setHorizontalHeaderLabels(headName)

        for i in range(len(result)):
            for j in range(len(result[0])):
                print(i)
                self.tableWidget_2.setItem(i, j, QTableWidgetItem(result[i][j]))

        # def show_data_table(self, data):
        #     self.tableWidget_2.setRowCount()

        # 重置表单
        # def reset_form(self):

        # 从下拉栏中选择形态表

    content = []
    revise_content = []
    def select_from_resources(self):
        try:

            resource = self.comboBox.currentText()
            cur = quarryDB.quarry_form(resource)

            resource_list = []
            for i in cur:
                i = list(i)
                resource_list.append(i[0])

             # 获得一串 tablename

            #初始化tab
            self.tabWidget.clear()
            self.content = []
            self.revise_content = []

            #查询修订表
            revise_results = quarryDB.quarry_logs(resource)
            self.revise_tab(resource + '修订记录', revise_results)
            self.revise_content.append(resource + "修订记录")
            self.revise_content.append(revise_results)
            for i in resource_list:
                print('当前表' + i)

                results = quarryDB.quarry_all(i)  # 查询一个table返回所有搜索结果


                # if len(results) != 0:

                self.browse_form(i, results)
                self.content.append([i])
                self.content.append(list(results))

                # else:
                #     print (i, "is empty")
        except Exception as a:
            traceback.print_exc()

    def revise_tab(self, tablename, results):
        # 初始化一个tab页
        print(sys._getframe(1).f_code.co_name)
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        # 设置成垂直排列
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        # 把table放到tab里
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayout_6.addWidget(self.tableWidget)
        self.tabWidget.addTab(self.tab, "")
        _translate = QtCore.QCoreApplication.translate

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", tablename))

        # # 贴到table上
        if results != None and len(results) != 0 and len(results[0]) - 1 > 0:
            self.tableWidget.setRowCount(len(results))
            self.tableWidget.setColumnCount(len(results[0]))
            for i in range(len(results)):
                for j in range(len(results[0])):

                    self.tableWidget.setItem(i, j, QTableWidgetItem(results[i][j]))
            self.tableWidget.verticalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
            self.tableWidget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
            self.tableWidget.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
            self.tableWidget.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)
            self.tableWidget.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeToContents)
            self.tableWidget.horizontalHeader().setSectionResizeMode(4, QHeaderView.Stretch)
            self.tableWidget.horizontalHeader().setSectionResizeMode(5, QHeaderView.ResizeToContents)
        # #表头 设置成中文
        # headName = quarryDB.get_head_name(tablename)
        # for i in range(len(headName)):
        #     headName[i] = constants.head_name[headName[i]]
        # 常量表头
        headName = constants.head_name_logs
        self.tableWidget.setHorizontalHeaderLabels(headName)





    def browse_form(self, tablename, results):


        # 初始化一个tab页
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        # 设置成垂直排列
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        # 把table放到tab里
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayout_6.addWidget(self.tableWidget)
        self.tabWidget.addTab(self.tab, "")
        _translate = QtCore.QCoreApplication.translate
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", tablename))


        # # 贴到table上
        if results != None and len(results) != 0 and len(results[0]) - 1 > 0:
            self.tableWidget.setRowCount(len(results))
            self.tableWidget.setColumnCount(len(results[0]) - 1)
            for i in range(len(results)):
                for j in range(len(results[0])):
                    if j != 0:
                        self.tableWidget.setItem(i, j - 1, QTableWidgetItem(results[i][j]))
            self.rander_table_background_browse(self.tableWidget)
        # #表头 设置成中文
        # headName = quarryDB.get_head_name(tablename)
        # for i in range(len(headName)):
        #     headName[i] = constants.head_name[headName[i]]
        #常量表头
        headName = constants.head_name_cn
        self.tableWidget.setHorizontalHeaderLabels(headName)

        # for i in range(len(results)):
        #     for j in range(len(results[0])):
        #         if j != 0:
        #             self.tableWidget.setItem(i, j - 1, QTableWidgetItem(results[i][j]))
        # self.rander_table_background_browse(self.tableWidget)

    def excel_to_browse(self, tablename, results):


        # 初始化一个tab页
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        # 设置成垂直排列
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        # 把table放到tab里
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayout_6.addWidget(self.tableWidget)
        self.tabWidget.addTab(self.tab, "")
        _translate = QtCore.QCoreApplication.translate
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", tablename))


        # # 贴到table上
        if results != None and len(results) != 0 and len(results[0]) - 1 > 0:
            self.tableWidget.setRowCount(len(results))
            self.tableWidget.setColumnCount(len(results[0]))
            for i in range(len(results)):
                for j in range(len(results[0])):

                    self.tableWidget.setItem(i, j, QTableWidgetItem(results[i][j]))
            self.rander_table_background_browse(self.tableWidget)
        # #表头 设置成中文
        # headName = quarryDB.get_head_name(tablename)
        # for i in range(len(headName)):
        #     headName[i] = constants.head_name[headName[i]]
        #常量表头
        headName = constants.head_name_cn
        self.tableWidget.setHorizontalHeaderLabels(headName)

        # for i in range(len(results)):
        #     for j in range(len(results[0])):
        #         if j != 0:
        #             self.tableWidget.setItem(i, j - 1, QTableWidgetItem(results[i][j]))
        # self.rander_table_background_browse(self.tableWidget)


    def check_item(self,item,col):
        # print(self.stackedWidget_1.sender().objectName())
        #勾选逻辑
        if item.checkState(col) == QtCore.Qt.Checked:
            for i in range(item.childCount()):
                if(item.child(i).checkState(col) == QtCore.Qt.Unchecked):
                    item.child(i).setCheckState(col,QtCore.Qt.Checked)
            flag = [0]
            # print('检查子列结束')
            # print(item.parent().text(col))
            #

            if item.parent() != None:
                for i in range(item.parent().childCount()):
                    # print('检查slibling')
                    if item.parent().child(i).checkState(col) == QtCore.Qt.Unchecked:
                        flag[0] = 1
                        # print(flag)
            if flag[0] == 0 and item.parent() != None and item.parent().checkState(col) == QtCore.Qt.Unchecked :
                # print('falg == 0')

                item.parent().setCheckState(col,QtCore.Qt.Checked)
        #取消勾选逻辑 用到2个flag
        else:
            flag1 = [0]
            flag2 = True
            if item.parent() != None and item.parent().checkState(col) == QtCore.Qt.Checked:
                item.parent().setCheckState(col,QtCore.Qt.Unchecked)
            for i in range(item.childCount()):
                if item.child(i).checkState(col) == QtCore.Qt.Checked:
                    flag1[0] = 1
                flag2 = flag2 and item.child(i).checkState(col) == QtCore.Qt.Checked
            if flag1[0] == 0 or flag2:
                for i in range(item.childCount()):
                    item.child(i).setCheckState(col,QtCore.Qt.Unchecked)
        #收集check的单板

        hardware = []
        for i in range(self.treeWidget.topLevelItemCount()):
            for j in range(self.treeWidget.topLevelItem(i).childCount()):
                if(self.treeWidget.topLevelItem(i).child(j).checkState(col) == QtCore.Qt.Checked):
                    hardware.append(self.treeWidget.topLevelItem(i).child(j).text(col))
        self.selected_hardware  = hardware



    #增加单板选择表中的父节点， 也就是形态表
    def add_root(self, name):
        _translate = QtCore.QCoreApplication.translate
        # self.treeWidget = QtWidgets.QTreeWidget(self.page_4)
        # self.treeWidget.setObjectName("treeWidget")
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        self.treeWidget.topLevelItem(self.treeWidget.topLevelItemCount() - 1).setText(0, _translate("MainWindow", name))
        # item_1 = QtWidgets.QTreeWidgetItem(item_0)
        # item_1.setCheckState(0, QtCore.Qt.Unchecked)
        # item_1 = QtWidgets.QTreeWidgetItem(item_0)
        # item_1.setCheckState(0, QtCore.Qt.Unchecked)
        return item_0

    def add_child(self, name, index, root):
        _translate = QtCore.QCoreApplication.translate
        item_1 = QtWidgets.QTreeWidgetItem(root)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        self.treeWidget.topLevelItem(self.treeWidget.topLevelItemCount() - 1).child(index).setText(0, _translate("MainWindow", name))

    def double_check_submit(self):
        A = QMessageBox.question(self.stackedWidget_1, '确认', '是否确定插入该条目？', QMessageBox.Yes | QMessageBox.No)  # 创建一个二次确认框
        if A == QMessageBox.Yes:
            self.submit_form()
        else:
            print('cancel')
    #提交查找/插入条件表单
    def submit_form(self):
        try:
            #检测是否为全空
            emptyflag = 1
            #表单
            form = []
            #存储本次查询sql
            sql_store = []
            for i in range(len(constants.head_name_cn)):

                if self.tableWidget_3.item(0,i) != None and self.tableWidget_3.item(0,i).text() != '' and self.tableWidget_3.item(0,i).text().isspace() == False:
                    text = self.tableWidget_3.item(0,i).text().strip()

                    # print(text)

                    form.append(text)
                    emptyflag = 0
                else:
                    form.append('')
            if emptyflag == 1:
                A = QMessageBox.warning(self.stackedWidget_1, '提示', '插入信息不可全空')
                return


            logs_1 = []
            logs_2 = []
            logs_3 = []
            for i in self.selected_hardware:
                # print(i, form)
                sql = insertDB.insert_db(i, form[0], form[1], form[2], form[3], form[4], form[5], form[6], form[7],
                                   form[8], form[9], form[10]
                                   , form[11], form[12], form[13], form[14], form[15], form[16], form[17], form[18],
                                   form[19], form[20])
                sql_store.append(sql)
                #记录日志
                logs_1.append(form[0])
                logs_2.append(form[1])
                logs_3.append(i)
                # self.upload_logs('向 ' + i + '中 ' + form[0] + ' 插入 ' + form[1] + ' 成功')
            insertDB.excecute_sql(sql_store)
            for i in range(len(logs_1)):
                self.upload_logs('向 ' + logs_3[i] + '中的算法：' + logs_1[i] + ' 插入 ' + logs_2[i] + ' 成功')
            self.search()
        except Exception as e :
            if str(e).find('name') != -1:
                texts = '业务名重复'
            else :
                texts = str(e)

            QMessageBox.warning(self.stackedWidget_1, '提示', texts)  # 创建一个二次确认框

            self.upload_logs('插入失败 ,' + str(e) + texts  )
    #备份搜索结果 用来进行更新
    copy = []
    def search(self):
        try:
            #初始化table
            self.tableWidget_4.clearContents()
            self.tableWidget_4.setRowCount(0)
            #初始化备份
            self.copy = []

            form = []
            for i in range(len(constants.head_name_cn)):
                if self.tableWidget_3.item(0,i) != None and self.tableWidget_3.item(0,i) != '' and self.tableWidget_3.item(0,i).text().isspace() == False:
                    text = self.tableWidget_3.item(0,i).text().strip()
                    # print(text)
                    emptyflag = 0
                    form.append(text)

                else:
                    form.append('N/A')




            for i in self.selected_hardware:
                # print(i, form)
                results = quarryDB.quarry_search(i, form[0], form[1], form[2], form[3], form[4], form[5], form[6], form[7],
                                   form[8], form[9], form[10]
                                   , form[11], form[12], form[13], form[14], form[15], form[16], form[17], form[18],
                                   form[19], form[20])
                print(results)
                self.show_search_results(results,i)
            # self.show_search_results(results)
            # self.upload_logs('在 '+ i +' 中搜索 算法为 '+ form[0] +' 业务名为 ' + form[1] + '; 算法表ID = ' + form[2] + '; SubTID = ' + form[3]+ ' 的条目')

        except Exception as e :
            traceback.print_exc()
            print('search error')
            self.upload_logs("搜索失败")

    def show_search_results(self, results,tablename):
        try:
            if results != None and results != '' and len(results) != 0:
                preRow = self.tableWidget_4.rowCount()
                self.tableWidget_4.setRowCount(preRow + len(results))
                self.tableWidget_4.setColumnCount(len(results[0]))
                # 表头
                self.tableWidget_4.setHorizontalHeaderLabels(constants.head_name_search)
                for i in range(len(results)):
                    row = []
                    for j in range(len(results[0])):

                        if j != 0:
                            row.append(results[i][j])
                        self.tableWidget_4.setItem(i + preRow, j, QTableWidgetItem(results[i][j]))
                        if j == 0:
                            row.append(tablename)
                            self.tableWidget_4.setItem(i + preRow, j, QTableWidgetItem(tablename))
                    #拿到当前搜索备份
                    self.copy.append(row)


                # 搜索结果框自适应

                self.tableWidget_4.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)

                # self.tableWidget_4.item(1,3).setBackground(QBrush(QColor(60,179,113)))
                self.rander_table_background(self.tableWidget_4)


        except Exception as e:
            print("results is empty")
            traceback.print_exc()
    copy_logs = []
    def select_from_logs(self):
        try:
            resource = self.comboBox_2.currentText()



            self.tableWidget_6.clear()
            self.tableWidget_6.setRowCount(0)
            self.tableWidget_6.setColumnCount(0)
            self.copy_logs = []

                # print(i)

            results = quarryDB.quarry_logs(resource)  # 查询一个table返回所有搜索结果

            if results != None and len(results) != 0:
                self.tableWidget_6.setRowCount(len(results))
                self.tableWidget_6.setColumnCount(len(results[0]))
                headName = constants.head_name_logs
                self.tableWidget_6.setHorizontalHeaderLabels(headName)

                for i in range(len(results)):
                    row = []
                    for j in range(len(results[0])):
                        self.tableWidget_6.setItem(i, j, QTableWidgetItem(results[i][j]))
                        row.append(results[i][j])
                    self.copy_logs.append(row)

                self.tableWidget_6.verticalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
                self.tableWidget_6.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
                self.tableWidget_6.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
                self.tableWidget_6.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)
                self.tableWidget_6.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeToContents)
                self.tableWidget_6.horizontalHeader().setSectionResizeMode(4, QHeaderView.Stretch)
                self.tableWidget_6.horizontalHeader().setSectionResizeMode(5, QHeaderView.ResizeToContents)

                # self.browse_form(i, results)
                # self.content.append([i])
                # self.content.append(list(results))

            else:
                print("is empty")


        except Exception as a:
            traceback.print_exc()

    def rander_table_background(self, table):
        for i in range(table.rowCount()):
            if table.item(i,3).text().isdigit():
                num = int(table.item(i,3).text()) + 1

                table.item(i,3).setBackground(QBrush(QColor(num*111%255,num*99%255,120)))

            if table.item(i,4).text().isdigit():
                num = int(table.item(i, 4).text()) + 1
                table.item(i, 4).setBackground(QBrush(QColor(num * 130 % 255, num * 120 % 255, 120)))
    def rander_table_background_browse(self, table):
        for i in range(table.rowCount()):
            if table.item(i,2).text().isdigit():
                num = int(table.item(i,2).text()) + 1

                table.item(i,2).setBackground(QBrush(QColor(num*111%255,num*99%255,120)))

            if table.item(i,3).text().isdigit():
                num = int(table.item(i, 3).text()) + 1
                table.item(i, 3).setBackground(QBrush(QColor(num * 130 % 255, num * 120 % 255, 120)))


    def delete(self):
        try:
            form = []
            llog = ''
            for i in range(self.tableWidget_4.rowCount()):
                if self.tableWidget_4.item(i,0).isSelected():
                    for j in range(self.tableWidget_4.columnCount()):
                        form.append(self.tableWidget_4.item(i,j).text().strip())
            if len(form) != 0:
                llog = deleteDB.delete( form[0], form[1], form[2], form[3], form[4], form[5], form[6], form[7],
                                   form[8], form[9], form[10]
                                   , form[11], form[12], form[13], form[14], form[15], form[16], form[17], form[18],
                                   form[19], form[20],form[21])


                self.search()
            else:
                print('no item selected')
            if llog != '':
                self.upload_logs(llog)

        except Exception as e :
            traceback.print_exc()
            self.upload_logs("删除 " + form[0] + '中的' + form[2] + '失败')
            print('delete error')
    #确认删除
    def double_check_delete(self):
        A = QMessageBox.question(self.stackedWidget_1, '确认', '是否确定删除该条目？', QMessageBox.Yes | QMessageBox.No)  # 创建一个二次确认框
        if A == QMessageBox.Yes:
            self.delete()
        else:
            print('cancel')

    #更新整张表 需要原子性
    def update(self):
        try:
            llog = ''
            emptyflag = 1
            sql_store = []
            for i in range(self.tableWidget_4.rowCount()):
                form = []

                for j in range(self.tableWidget_4.columnCount()):
                    if self.tableWidget_4.item(i,j) != None and self.tableWidget_4.item(i,j).text() != '' and self.tableWidget_4.item(i,j).text().isspace() == False:

                        form.append(self.tableWidget_4.item(i,j).text().strip())
                    else:
                        QMessageBox.warning(self.stackedWidget_1,'提示','更改条目不可为空！')
                        return


                if len(form) != 0:
                    llog = updateDB.update_db( form[0], form[1], form[2], form[3], form[4], form[5], form[6], form[7],
                                       form[8], form[9], form[10]
                                       , form[11], form[12], form[13], form[14], form[15], form[16], form[17], form[18],
                                       form[19], form[20],form[21], i, self.copy)
                # self.upload_logs("更新 " + form[0] + '中的' + form[2] + '成功')
                #lists 里面包含log信息和待执行sql
                if llog != None and len(llog) != 0:
                    lists = list(llog)
                    sql_store.append(lists[1])
            updateDB.sql_excecute(sql_store)
            # if llog != '':
            #     self.upload_logs(llog)
            self.search()

        except Exception as e:

            # self.upload_logs('更新失败，' + form[0] + ' 中存在相同业务名')
            A = QMessageBox.warning(self.stackedWidget_1, '提示', '更新失败，存在相同业务名')  # 创建一个二次确认框

            traceback.print_exc()
            self.search()

    def search_to_excel(self):

        # openfile_name = QFileDialog.getOpenFileNames(self.stackedWidget_1,'选择文件')
        # print(openfile_name)
        fileName = QFileDialog.getSaveFileName(self.stackedWidget_1, "", "",".xlsx")
        # print(fileName)
        fileName = list(fileName)
        if fileName[0].find('.xlsx') != -1:
            dir = fileName[0]
        else :

            dir = fileName[0] + fileName[1]
        result = []
        try:

            for i in range(self.tableWidget_4.rowCount()):
                row = []
                for j in range(self.tableWidget_4.columnCount()):
                    row.append(self.tableWidget_4.item(i,j).text())
                result.append(row)
            result.insert(0, constants.head_name_search)
            xlsxOpenpyxl.write_excel_xlsx(dir,'sheet1',result)

        except Exception as e:
            print()


    def browse_to_excel(self):
        try:
            if self.tabWidget.tabText(0) == None or self.tabWidget.tabText(0) == '' :
                QMessageBox.warning(self.stackedWidget_1,'提示','请先选择形态表')
                return
            fileName = QFileDialog.getSaveFileName(self.stackedWidget_1, "", "", ".xlsx")
            # print(fileName)
            fileName = list(fileName)
            if fileName[0].find('.xlsx') != -1:
                dir = fileName[0]
            else:

                dir = fileName[0] + fileName[1]

            sheetname = ''
            xlsxOpenpyxl.helper(dir)
            self.revise_to_excel(dir)

            for i in range(len(self.content)):
                onesheet = []
                if len(self.content[i]) == 1 and i % 2 == 0:
                    sheetname = self.content[i][0]
                    #这里得到了一个sheet名字
                    #添加一个sheet页
                    xlsxOpenpyxl.add_sheet(dir,sheetname)
                elif len(self.content[i]) >= 1:
                    # row = list(self.content[i][0])
                    # del[row[0]]

                    for j in self.content[i]:
                        row = list(j)
                        del[row[0]]
                        onesheet.append(row)
                    onesheet.insert(0, constants.head_name_cn)
                    xlsxOpenpyxl.add_content_to_sheet(dir,sheetname,onesheet)
            xlsxOpenpyxl.cur_head(dir)
        except Exception as e:
            print("browse_to_excel error")

    def revise_to_excel(self, dir):
        sheetname = self.revise_content[0]
        xlsxOpenpyxl.add_sheet(dir, sheetname)
        onesheet = []
        for i in self.revise_content[1]:
            onesheet.append(list(i))
        onesheet.insert(0,constants.head_name_logs)
        xlsxOpenpyxl.add_content_to_sheet(dir, sheetname, onesheet)




    def clear_search(self):
        self.tableWidget_3.clearContents()

    def upload_logs(self, log):
        log = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) + '  ' + log
        self.listWidget.addItem(log)

    def double_check_revise(self):

        A = QMessageBox.question(self.stackedWidget_1, '确认', '是否确认记录该修订？',
                                     QMessageBox.Yes | QMessageBox.No)  # 创建一个二次确认框
        if A == QMessageBox.Yes:
            self.revise_form()
            self.select_from_logs()
        else:
            print('cancel')


    def revise_form(self):
        try:

            form = []
            for i in range(len(constants.head_name_logs_input)):
                if self.tableWidget_5.item(0, i) != None:
                    text = self.tableWidget_5.item(0, i).text().strip()
                    # print(text)

                    form.append(text)

                else:
                    form.append('N/A')
            tablename = self.comboBox_2.currentText()
            form.insert(0, time.strftime("%Y-%m-%d", time.localtime()))

            insertDB.insert_logs(tablename, form[0], form[1], form[2], form[3], form[4], form[5])


        except Exception as e:
            traceback.print_exc()
            print('submit_log error')

        # 备份搜索结果 用来进行更新
    #更新整张表 需要原子性
    def update_revise(self):
        try:
            for i in range(self.tableWidget_6.rowCount()):
                form = []
                for j in range(self.tableWidget_6.columnCount()):
                    form.append(self.tableWidget_6.item(i,j).text().strip())
                if len(form) != 0:
                    print(self.copy_logs)
                    updateDB.update_revise_db( self.comboBox_2.currentText(), form[0], form[1], form[2], form[3], form[4], form[5], i, self.copy_logs)
                # self.upload_logs("更新 " + form[0] + '中的' + form[2] + '成功')
                #更改成功后 备份变成当前


            # else:
            #     print('')
            self.select_from_logs()
        except Exception as e:
            print('update error')


    def double_check_delete_revise(self):
        A = QMessageBox.question(self.stackedWidget_1, '确认', '是否确定删除词条修订？',
                                 QMessageBox.Yes | QMessageBox.No)  # 创建一个二次确认框
        if A == QMessageBox.Yes:
            self.delete_revise()
        else:
            print('cancel')

    def delete_revise(self):
        try:
            form = []
            for i in range(self.tableWidget_6.rowCount()):
                if self.tableWidget_6.item(i,0).isSelected():
                    for j in range(self.tableWidget_6.columnCount()):
                        form.append(self.tableWidget_6.item(i,j).text().strip())
            if len(form) != 0:
                deleteDB.delete_revise( self.comboBox_2.currentText(),form[0], form[1], form[2], form[3], form[4], form[5])


                self.select_from_logs()
            else:
                print('no item selected')
        except Exception as e :
            traceback.print_exc()
            print('delete error')

    browse_store = []
    def open_excel(self):
        _translate = QtCore.QCoreApplication.translate
        try:
            #清空tab


            fileName = QFileDialog.getOpenFileName(self.stackedWidget_1,'','',"*.xlsx")
            fileName = list(fileName)
            if fileName[0] == None or len(fileName[0]) == 0:
                return
            self.tabWidget.clear()
            #lists结构 lists 里第一行数据是sheet页名字  sheet页第一个是修订后面是单板 [[一个sheet页[一行数据]]]
            self.browse_store = xlsxOpenpyxl.read_excel_xlsx(fileName[0])
            print(self.browse_store)
            self.revise_tab(self.browse_store[0][0], self.browse_store[1])
            for i in range(len(self.browse_store[0])):
                if i == 0 :
                    continue
                print()
                self.excel_to_browse(self.browse_store[0][i], self.browse_store[1 + i])

            self.label_4.setText(_translate("MainWindow", "预览：" + fileName[0]))
            self.pushButton_20.hide()
            self.pushButton_12.hide()
            self.pushButton_13.hide()
            self.comboBox.hide()
            self.label_3.hide()
            self.pushButton_21.show()
            self.pushButton_22.show()
            QMessageBox.about(self.stackedWidget_1,'提示','导入成功')
        except Exception :
            traceback.print_exc()
            self.comboBox.setcurrentText()

    #退出预览
    def close_browse(self):
        _translate = QtCore.QCoreApplication.translate
        self.pushButton_21.hide()
        self.pushButton_22.hide()
        self.pushButton_20.show()
        self.pushButton_12.show()
        self.pushButton_13.show()
        self.comboBox.show()
        self.label_3.show()
        self.label_4.setText(_translate("MainWindow", "当前形态"))
        self.tabWidget.clear()

    #先判断形态表已经存在
    def save_browse(self):
        try:

            excelName = self.tabWidget.tabText(0).replace('修订记录','').strip()
            flag = 1
            droptable = []
            oldname = []
            newname = []
            hardware = self.get_table_from_form(excelName)
            rootlist = quarryDB.quarry_form_store()
            rootlist = list(rootlist)
            rootlist.insert(0,"形态表")

            resources_list = []
            for i in rootlist:
                if i == '形态表':
                    resources_list.append(i)
                else:
                    i = list(i)
                    resources_list.append(i[0])

            #判断这个excel中的形态表是否存在
            for i in resources_list:

                if excelName == i:
                    flag = 0
            for i in range(self.tabWidget.count()):
                if i == 0:
                    if '修订记录' not in self.tabWidget.tabText(0):
                        QMessageBox.about(self.stackedWidget_1, '提示', 'excel格式错误' )
                    else:
                        continue

                if self.tabWidget.tabText(i) not in hardware:
                    QMessageBox.about(self.stackedWidget_1, '提示', 'Excel存在未注册单板：'+self.tabWidget.tabText(i))
                    return
            droplog = ''
            if flag == 0:
                #先建表 成功后再删表 然后
                for i in range(self.tabWidget.count()):
                    sqls = []
                    if i == 0:
                        print(self.browse_store)
                        sqlite3DB.create_log(excelName + '_tmp')
                        for j in self.browse_store[1]:
                            insertDB.insert_logs(excelName+'_tmp', j[0],j[1],j[2],j[3],j[4],j[5])
                        # sqlite3DB.drop_table(excelName+'_logs')

                        droplog = excelName+'_logs'
                        # sqlite3DB.rename_table(excelName+'_tmp_logs', excelName+'_logs')
                        oldname.append(excelName+'_tmp_logs')
                        newname.append(excelName+'_logs')
                    else:
                        #从db调出单板列表
                        hardware = self.get_table_from_form(excelName)
                        for j in hardware:
                            if j == self.tabWidget.tabText(i):
                                sqlite3DB.create_table(self.tabWidget.tabText(i) + '_tmp')





                        for j in self.browse_store[i + 1]:

                            sql = insertDB.insert_db(self.tabWidget.tabText(i)+'_tmp', j[0],j[1],j[2],j[3],j[4],j[5],j[6]
                                                   ,j[7],j[8],j[9],j[10],j[11],j[12],j[13],j[14],j[15],j[16],j[17],
                                                   j[18],j[19],j[20])
                            sqls.append(sql)
                        insertDB.excecute_sql(sqls)
                        # sqlite3DB.drop_table(self.tabWidget.tabText(i))

                        # droptable.append(self.tabWidget.tabText(i))
                        # sqlite3DB.rename_table(self.tabWidget.tabText(i)+'_tmp', self.tabWidget.tabText(i))
                        oldname.append(self.tabWidget.tabText(i)+'_tmp')
                        newname.append(self.tabWidget.tabText(i))

                #等所有新表都更新后  删掉旧表
                droptable = self.get_table_from_form(excelName)
                droptable.insert(0,droplog)
                for i in range(len(droptable)):
                    sqlite3DB.drop_table(droptable[i])
                for i in range(len(oldname)):
                    sqlite3DB.rename_table(oldname[i], newname[i])


                QMessageBox.about(self.stackedWidget_1, '提示', '覆盖成功')
                self.close_browse()



            else:
                QMessageBox.warning(self.stackedWidget_1,'提示','该形态表尚不存在，请先注册后添加')
                return

        except IntegrityError as e:
            traceback.print_exc()
            QMessageBox.warning(self.stackedWidget_1,'提示', '业务名重复，覆盖失败')

        except IndexError as e:
            traceback.print_exc()
            QMessageBox.warning(self.stackedWidget_1,'提示','Excel格式错误')


        except Exception :
            traceback.print_exc()
            error= str(e)
            QMessageBox.warning(self.stackedWidget_1, '提示', error)

        finally:
            sqlite3DB.delete_tmp()
            self.close_browse()

    def double_check_overwrite(self):

        A = QMessageBox.question(self.stackedWidget_1, '确认', '是否确定覆盖该形态表？',
                                 QMessageBox.Yes | QMessageBox.No)  # 创建一个二次确认框
        if A == QMessageBox.Yes:
            self.save_browse()

        else:
            print('cancel')


    # 菜单
    def showContextMenu(self):
        self.contextMenu.exec_(QCursor.pos())

    def menu_newForm(self):
        try:

            # 第三个参数表示显示类型，可选，有正常（QLineEdit.Normal）、密碼（ QLineEdit. Password）、不显示（ QLineEdit. NoEcho）三种情况
            formname, ok = QInputDialog.getText(self.treeWidget, "新建形态表", "命名新的形态表:", QLineEdit.Normal, "")
            if ok == True:
                formname.strip()
                print("侧事故啊啊啊")
                print(ok)
                if formname == None or formname == '' or formname.isspace == True:
                    raise Exception('形态表不可为空')
                else:
                    form_list = list(quarryDB.quarry_form_store())
                    print(form_list)
                    for i in form_list:
                        if i == formname:
                            raise Exception('形态表已存在')
                    #二次确认插入
                    A = QMessageBox.question(self.stackedWidget_1, '确认', '确定新建形态表：'+formname+' ？',
                                             QMessageBox.Yes | QMessageBox.No)
                    if A == QMessageBox.Yes:
                        #注册到form store里
                        insertDB.insert_form(formname)
                        #创建一个存储新的单板的form表
                        sqlite3DB.create_form(formname)
                        sqlite3DB.create_log(formname)
                        QMessageBox.warning(self.stackedWidget_1, '提示', '形态表 ' + formname + ' 新建成功')
                        self.upload_logs('新建形态表:' + formname)
                        self.refresh_tree()
                    else:
                        print('取消创建')


        except Exception as e:
            A = QMessageBox.warning(self.stackedWidget_1, '提示', '新建失败,' + str(e))

            self.upload_logs('新建失败，' + str(e))


    def menu_newHardware(self):

        try:
            #获得被点击的条目
            if self.treeWidget.currentItem().parent() == None:
                formname = self.treeWidget.currentItem().text(0)
            else:
                formname = self.treeWidget.currentItem().parent().text(0)

            # 第三个参数表示显示类型，可选，有正常（QLineEdit.Normal）、密碼（ QLineEdit. Password）、不显示（ QLineEdit. NoEcho）三种情况
            tablename, ok = QInputDialog.getText(self.treeWidget, "新建单板", "在" + formname + "中命名新的单板:", QLineEdit.Normal, "")
            if ok == True:
                tablename.strip()
                print(tablename)
                if tablename == None or tablename == '' or tablename.isspace == True:
                    raise Exception('单板名称不可为空')
                else:
                    form_list = list(quarryDB.quarry_form(formname))
                    print("现在有的单板" + str(form_list))
                    for i in form_list:
                        i = list(i)

                        # print("当前表" + i)
                        # print('新表'+ tablename)

                        if i[0] == tablename:
                            raise Exception('该单板已存在')
                    # 二次确认插入
                    A = QMessageBox.question(self.stackedWidget_1, '确认', '确定新建单板：' + tablename + ' ？',
                                             QMessageBox.Yes | QMessageBox.No)
                    if A == QMessageBox.Yes:
                        # 将单板注册到form里
                        insertDB.insert_hardware(formname, tablename)
                        # 创建一个存储新的单板的form表 和logs
                        sqlite3DB.create_table(tablename)

                        QMessageBox.warning(self.stackedWidget_1, '提示', '新建成功')
                        self.upload_logs('新建单板:' + tablename)
                        self.refresh_tree()
                    else:
                        print('取消创建')


        except Exception as e:
            A = QMessageBox.warning(self.stackedWidget_1, '提示', '新建失败,' + str(e))

            self.upload_logs('新建失败，' + str(e))


        # for i in range(self.tabWidget.count()):
        #     print(i)
        #     print(self.tableWidget.item(2,0).text())
        #     for i in range(self.tableWidget.rowCount()):
        #         row = []
        #         for j in range(self.tableWidget.columnCount()):
        #             row.append(self.tableWidget.item(i,j).text())
        #         result.append(row)
        #     result.insert(0,constants.head_name_search)
        #     xlsxOpenpyxl.write_excel_xlsx(dir,'sheet1',result)

    def refresh_tree(self):

        self.treeWidget.clear()
        rootlist = quarryDB.quarry_form_store()
        rootlist = list(rootlist)
        # rootlist.insert(0,"形态表")
        for i in range(len(rootlist)):
            # if i == 0:  # 跳过第一条 也就是“形态表”
            #     continue
            cur = list(rootlist[i])
            root = self.add_root(cur[0])
            print(root)
            # 从constants初始化tree 下拉表单的子表（单板）
            childlist = quarryDB.quarry_form(root.text(0))
            childlist = list(childlist)

            for j in range(len(childlist)):
                tmp = list(childlist[j])
                self.add_child(tmp[0], j, root)
        resources_list = []
        for i in rootlist:
            # if i == '形态表':
            #     resources_list.append(i)
            # else:
            i = list(i)
            resources_list.append(i[0])


        self.comboBox_2.clear()
        self.comboBox_2.addItems(resources_list)

    def menu_delete(self):
        try:
            form = self.treeWidget.currentItem()
            if form.parent() != None:
                #警告
                A = QMessageBox.question(self.stackedWidget_1, '确认', '是否确认删除单板' + form.text(0)+'？',
                                         QMessageBox.Yes | QMessageBox.No)  # 创建一个二次确认框
                if A == QMessageBox.Yes:
                    deleteDB.delete_table_from_form(form.parent().text(0), form.text(0))
                    self.upload_logs('成功删除单板 '+form.text(0))
                    self.refresh_tree()
                else:
                    print('cancel')
                    return
            #父节点
            elif form.parent() == None and form.childCount() != 0:
                QMessageBox.warning(self.stackedWidget_1,'警告','无法删除，' + form.text(0) +'形态表尚存在单板')
                return
            else:
                # 警告
                A = QMessageBox.question(self.stackedWidget_1, '确认', '是否确认删除形态表' + form.text(0) + '？',
                                         QMessageBox.Yes | QMessageBox.No)  # 创建一个二次确认框
                if A == QMessageBox.Yes:
                    deleteDB.delete_form_from_formstore(form.text(0))
                    self.upload_logs('成功删除单板 ' + form.text(0))
                    self.refresh_tree()
                else:
                    print('cancel')
                    return
        except Exception as e:
            traceback.print_exc()
            self.upload_logs(e)

    def get_table_from_form(self,formname):
        cur = quarryDB.quarry_form(formname)

        resource_list = []
        for i in cur:
            i = list(i)
            resource_list.append(i[0])
        return resource_list

    #返回所有形态表名 初始化tree窗口
    def tree_init(self):
        rootlist = quarryDB.quarry_form_store()
        rootlist = list(rootlist)

        for i in range(len(rootlist)):
            cur = list(rootlist[i])
            root = self.add_root(cur[0])
            print(root)

            childlist = quarryDB.quarry_form(root.text(0))
            childlist = list(childlist)

            for j in range(len(childlist)):
                tmp = list(childlist[j])
                self.add_child(tmp[0], j, root)
        resources_list = []
        for i in rootlist:
            i = list(i)
            resources_list.append(i[0])
        return resources_list

    def get_all_form_name(self):
        rootlist = quarryDB.quarry_form_store()
        rootlist = list(rootlist)
        resources_list = []
        for i in rootlist:
            i = list(i)
            resources_list.append(i[0])
        return resources_list
    def refresh_browse(self):
        num = self.comboBox.currentIndex()
        self.comboBox.clear()
        self.comboBox.addItems(self.get_all_form_name())
        self.comboBox.setCurrentIndex(num)





#必须加入的
import sys
sys.setrecursionlimit(1000000)

from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QMessageBox, QHeaderView

if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())